/* Generated by the protocol buffer compiler.  DO NOT EDIT! */

#ifndef PROTOBUF_C_openbeacon_2eproto__INCLUDED
#define PROTOBUF_C_openbeacon_2eproto__INCLUDED

#include <google/protobuf-c/protobuf-c.h>

PROTOBUF_C_BEGIN_DECLS


typedef struct _ObTracking ObTracking;
typedef struct _ObProximityTagPower ObProximityTagPower;
typedef struct _ObProximityTag ObProximityTag;
typedef struct _ObProximityLog ObProximityLog;
typedef struct _ObTag ObTag;


/* --- enums --- */

typedef enum _ObUnit {
  OB_UNIT__OB_UNIT_NONE = 0,
  OB_UNIT__OB_UNIT_PIXEL = 1,
  OB_UNIT__OB_UNIT_MILLIMETER = 2,
  OB_UNIT__OB_UNIT_CENTIMETER = 3,
  OB_UNIT__OB_UNIT_METER = 4,
  OB_UNIT__OB_UNIT_INCH = 5,
  OB_UNIT__OB_UNIT_FEET = 6,
  OB_UNIT__OB_UNIT_YARD = 7
} ObUnit;

/* --- messages --- */

struct  _ObTracking
{
  ProtobufCMessage base;
  protobuf_c_boolean has_x;
  int32_t x;
  protobuf_c_boolean has_y;
  int32_t y;
  protobuf_c_boolean has_z;
  int32_t z;
  protobuf_c_boolean has_unit;
  ObUnit unit;
  size_t n_reader_id;
  uint32_t *reader_id;
  protobuf_c_boolean has_tx_strength;
  uint32_t tx_strength;
  protobuf_c_boolean has_area_id;
  uint32_t area_id;
  protobuf_c_boolean has_room_id;
  uint32_t room_id;
  protobuf_c_boolean has_building_id;
  uint32_t building_id;
  protobuf_c_boolean has_installation_id;
  uint32_t installation_id;
};
#define OB_TRACKING__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ob_tracking__descriptor) \
    , 0,0, 0,0, 0,0, 0,0, 0,NULL, 0,0, 0,0, 0,0, 0,0, 0,0 }


struct  _ObProximityTagPower
{
  ProtobufCMessage base;
  protobuf_c_boolean has_power;
  uint32_t power;
  protobuf_c_boolean has_count;
  uint32_t count;
};
#define OB_PROXIMITY_TAG_POWER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ob_proximity_tag_power__descriptor) \
    , 0,0, 0,0 }


struct  _ObProximityTag
{
  ProtobufCMessage base;
  uint32_t id;
  size_t n_power;
  ObProximityTagPower **power;
};
#define OB_PROXIMITY_TAG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ob_proximity_tag__descriptor) \
    , 0, 0,NULL }


struct  _ObProximityLog
{
  ProtobufCMessage base;
  uint32_t time;
  uint32_t duration;
  size_t n_tag;
  ObProximityTag **tag;
};
#define OB_PROXIMITY_LOG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ob_proximity_log__descriptor) \
    , 0, 0, 0,NULL }


struct  _ObTag
{
  ProtobufCMessage base;
  protobuf_c_boolean has_tag_id;
  uint32_t tag_id;
  protobuf_c_boolean has_tag_time;
  uint32_t tag_time;
  protobuf_c_boolean has_tag_power_cycles;
  uint32_t tag_power_cycles;
  protobuf_c_boolean has_tag_strength;
  uint32_t tag_strength;
  size_t n_forwarder_id;
  uint32_t *forwarder_id;
  protobuf_c_boolean has_forwarder_storage_time;
  uint32_t forwarder_storage_time;
  protobuf_c_boolean has_rx_time;
  uint64_t rx_time;
  ObTracking *tracking;
  size_t n_proximity;
  ObProximityLog **proximity;
};
#define OB_TAG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ob_tag__descriptor) \
    , 0,0, 0,0, 0,0, 0,0, 0,NULL, 0,0, 0,0, NULL, 0,NULL }


/* ObTracking methods */
void   ob_tracking__init
                     (ObTracking         *message);
size_t ob_tracking__get_packed_size
                     (const ObTracking   *message);
size_t ob_tracking__pack
                     (const ObTracking   *message,
                      uint8_t             *out);
size_t ob_tracking__pack_to_buffer
                     (const ObTracking   *message,
                      ProtobufCBuffer     *buffer);
ObTracking *
       ob_tracking__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ob_tracking__free_unpacked
                     (ObTracking *message,
                      ProtobufCAllocator *allocator);
/* ObProximityTagPower methods */
void   ob_proximity_tag_power__init
                     (ObProximityTagPower         *message);
size_t ob_proximity_tag_power__get_packed_size
                     (const ObProximityTagPower   *message);
size_t ob_proximity_tag_power__pack
                     (const ObProximityTagPower   *message,
                      uint8_t             *out);
size_t ob_proximity_tag_power__pack_to_buffer
                     (const ObProximityTagPower   *message,
                      ProtobufCBuffer     *buffer);
ObProximityTagPower *
       ob_proximity_tag_power__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ob_proximity_tag_power__free_unpacked
                     (ObProximityTagPower *message,
                      ProtobufCAllocator *allocator);
/* ObProximityTag methods */
void   ob_proximity_tag__init
                     (ObProximityTag         *message);
size_t ob_proximity_tag__get_packed_size
                     (const ObProximityTag   *message);
size_t ob_proximity_tag__pack
                     (const ObProximityTag   *message,
                      uint8_t             *out);
size_t ob_proximity_tag__pack_to_buffer
                     (const ObProximityTag   *message,
                      ProtobufCBuffer     *buffer);
ObProximityTag *
       ob_proximity_tag__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ob_proximity_tag__free_unpacked
                     (ObProximityTag *message,
                      ProtobufCAllocator *allocator);
/* ObProximityLog methods */
void   ob_proximity_log__init
                     (ObProximityLog         *message);
size_t ob_proximity_log__get_packed_size
                     (const ObProximityLog   *message);
size_t ob_proximity_log__pack
                     (const ObProximityLog   *message,
                      uint8_t             *out);
size_t ob_proximity_log__pack_to_buffer
                     (const ObProximityLog   *message,
                      ProtobufCBuffer     *buffer);
ObProximityLog *
       ob_proximity_log__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ob_proximity_log__free_unpacked
                     (ObProximityLog *message,
                      ProtobufCAllocator *allocator);
/* ObTag methods */
void   ob_tag__init
                     (ObTag         *message);
size_t ob_tag__get_packed_size
                     (const ObTag   *message);
size_t ob_tag__pack
                     (const ObTag   *message,
                      uint8_t             *out);
size_t ob_tag__pack_to_buffer
                     (const ObTag   *message,
                      ProtobufCBuffer     *buffer);
ObTag *
       ob_tag__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ob_tag__free_unpacked
                     (ObTag *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*ObTracking_Closure)
                 (const ObTracking *message,
                  void *closure_data);
typedef void (*ObProximityTagPower_Closure)
                 (const ObProximityTagPower *message,
                  void *closure_data);
typedef void (*ObProximityTag_Closure)
                 (const ObProximityTag *message,
                  void *closure_data);
typedef void (*ObProximityLog_Closure)
                 (const ObProximityLog *message,
                  void *closure_data);
typedef void (*ObTag_Closure)
                 (const ObTag *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCEnumDescriptor    ob_unit__descriptor;
extern const ProtobufCMessageDescriptor ob_tracking__descriptor;
extern const ProtobufCMessageDescriptor ob_proximity_tag_power__descriptor;
extern const ProtobufCMessageDescriptor ob_proximity_tag__descriptor;
extern const ProtobufCMessageDescriptor ob_proximity_log__descriptor;
extern const ProtobufCMessageDescriptor ob_tag__descriptor;

PROTOBUF_C_END_DECLS


#endif  /* PROTOBUF_openbeacon_2eproto__INCLUDED */
