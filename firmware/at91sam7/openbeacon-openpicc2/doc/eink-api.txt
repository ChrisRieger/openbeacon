Include eink/eink.h, call eink_interface_init() to set up the general eInk controller interface. 
Call eink_mgmt_init() with a buffer and the buffer's length to prepare internal management data structures
(this buffer is to be considered opaque, this setup will go away sometime soon and be handled internally).
The buffer must be at least eink_mgmt_size bytes big, otherwise you'll get a negative return code.

Call eink_controller_reset() to reset the controller. You must wait at least 4ms between
eink_interface_init() and eink_controller_reset().

Call eink_controller_init() and check its return code: 0 means OK, all other are negative enum eink_error
values (e.g. a return of -EINK_ERROR_NOT_DETECTED means that the controller has not been detected at all).
Do not use any further eInk features in case of a negative return value.

The higher level API handles two types of objects: image buffers (eink_image_buffer_t) and jobs (eink_job_t).
Image buffers are buffers in the controller RAM that contain one full screen image each, basically like
off-screen buffers in conventional display systems (only that there are no "on-screen buffers" in eInk).
You must acquire at least one image buffer with eink_image_buffer_acquire(), fill it with some data and can
then schedule drawing jobs using that buffer's data. The controller RAM can probably hold approx. 60 image
buffers (though there currently is an arbitrary limit set at 10 in the management code).

Once you have the data that you want to display loaded into an image buffer you can schedule a drawing job
to actually display that data. There is a queue for pending jobs (currently set to 32; the controller itself
can execute up to 16 parallel jobs (or really: parts) in hardware) and each job can consist of multiple parts
(currently 4, but that's again arbitrary) that are to be executed atomically (e.g. for drawing a border
outline without touching the contents). Each jobs starts with eink_job_begin(), then gets one or more parts
added with eink_job_add*() and is then put onto the queue with eink_job_commit(). The job is executed as
soon as possible but might be delayed since no two running jobs may update the same pixels on the screen.

Each job can be assigned a cookie (in eink_job_begin()) by the application: if the cookie is not zero then
it's compared to all currently queued but not executing jobs and if there already is a job queued with
that cookie this old job is canceled. This is so that you can for example always use the same cookie when 
drawing a certain UI element and will prevent queuing multiple updates to this UI element. (E.g. queuing
multiple on-off-on-off-on-off updates to an indicator will result in only the first and last update being
executed.)


eink_image_buffer_t demo_buffer;
eink_job_t demo_job;
extern unsigned char demo_image[480*640];
int error;

if((error=eink_image_buffer_acquire(&demo_buffer)) < 0) {
	printf("Couldn't acquire buffer, bailing\n");
	die();
}
eink_image_buffer_load(demo_buffer, PACK_MODE_1BYTE, ROTATION_MODE_90, demo_image, sizeof(demo_image));

eink_job_begin(&demo_job, 0);
eink_job_add(demo_job, demo_buffer, WAVEFORM_MODE_GC, UPDATE_MODE_FULL);
eink_job_commit(demo_job);


The enum eink_pack_mode in eink_image_buffer_load* determines the format of the data in the image that is to
be loaded: 1 byte per pixel, 4, 3 or 2 bit per pixel. In case of less than 1 byte per pixel the image is
expected to have packed more than one pixel per byte, see Epson documentation. Image storage in the
controller RAM is always unpacked (1 byte per pixel).

The enum eink_rotation_mode in eink_image_buffer_load*() determines the rotation that is to be applied when
loading the image into the controller RAM. (90 and 270 are portrait orientation, 0 and 180 are landscape
orientation.) The last rotation mode used is stored and used to interpret all further coordinated relating
to the image buffer in question. Try not to use more than one rotation mode per image buffer, it is 
confusing. Also, there may still be bugs here. You can not retroactively change the rotation of the data in
an image buffer, you have to reload the data if you want to rotate it (the rotation transformation is applied
when loading the data). You *can* however simply acquire more than one image buffer and then load the same
data with different rotation parameters into them.

The enum eink_waveform_mode in eink_job_add() determines the waveform that should be used when executing that
part. For the gory details see the Epson documentation. In short: 
 * WAVEFORM_MODE_INIT: Initialisation to white (and only to white), ~4000ms
 * WAVEFORM_MODE_DU: Direct update, black/white only, 260ms (does funny things when applied to image areas
   that previously were grayscale)
 * WAVEFORM_MODE_GU: Gray update, 8 gray levels, 780ms, slight ghosting
 * WAVEFORM_MODE_GC: Gray clear, 8 gray levels, 780ms, high flashing

The enum eink_update_mode corresponds to the difference between the *_FULL* and *_PART* commands in the Epson
documentation. UPDATE_MODE_FULL always updates all pixels, UPDATE_MODE_PART only updates those pixels that
have changed. There's also UPDATE_MODE_INIT which doesn't equal a drawing command per se but simply updates
the internal state of the eInk controller with whatever would have been drawn, without actually drawing
anything. Only use this during the boot procedure if you know exactly what the last display state was to
initialize the controller to this display state.

eink_image_buffer_load() is a convenience wrapper around eink_image_buffer_load_begin()/
eink_image_buffer_load_stream()/eink_image_buffer_load_end(). Similarly, eink_image_buffer_load_area() is
a convenience wrapper around eink_image_buffer_load_begin_area()/eink_image_buffer_load_stream()/
eink_image_buffer_load_end(). These load functions allow you to start a load process and then provide data
to load in small pieces, e.g. for on-the-fly decompression without storing the complete intermediate image
data. Start the load process with the *begin*() function, provide parts of the data with 
eink_image_buffer_load_stream() and then end the load process with eink_image_buffer_load_end(). There will
be a checksum computed during the load process and the return value of eink_image_buffer_load_end() if the
checksum is fine, or otherwise return -EIO. Warning: There is no locking in place, don't do loading from
multiple tasks or strange things will happen (at least the checksum should warn you).
Also there may be enhancements needed for ensuring a tearing free display when loading while executing
drawing commands (Epson documentation, chapter 13).

The x, y, w and h arguments to *load*() should be clear. Note: all coordinates are in the logical coordinate
system established by the rotation parameter. This also applies to the *job*() parameters.

eink_job_count_pending() gives you the number of pending and executing jobs. You can use this to wait for all
jobs to finish by using something like while(eink_job_count_pending() > 0) vTaskDelay(10/portTICK_RATE_MS);

Currently eink.c runs a task (initialized in eink_interface_init()) to check every 10ms whether new jobs are
runnable and then executes them. This can probably be ported to interrupt-based processing in the future.

There is also eink_lowlevel.h which exports functions for reading and writing registers and directly
executing commands. Do not use those.

Additionally there is eink_flash.h which exports a low-level interface to the controller flash. Do not
use this interface while using the high-level eInk interface. After using the flash interface you must
reset the controller and initialize it again (keeping in mind the approx. 4ms of delay). However, something
like if(eink_flash_conditional_reflash()) vTaskDelay(5/portTICK_RATE_MS); should be safe between 
eink_interface_init(); vTaskDelay(4/portTICK_RATE_MS); and eink_controller_reset();

eink_flash_conditional_reflash() is a convenience function that checks the flash to see whether it's
unprogrammed, and if so it programs the contents from eink/eink_flash_content.h (not provided in the SVN).
The LEDs will rapidly flash alternatingly red/green during this process. Obviously: Do not power-off
while programming the flash.
