#ifndef SPLASH_H_
#define SPLASH_H_

/* This file describes a 'splash' image, that is an image that is
 * to be compiled directly into the firmware image for easy and
 * fast access.
 * 
 * The image is generated by using ../../generate_splash.c (compiled
 * for the build platform) which will output C code that can be
 * compiled to generate an object that can be directly linked into
 * the firmware. You can then use image_unpack_splash from image.c
 * to get a image_t object that you can use for further operations.
 * 
 * 
 * Splash image format: To save space the image data will be compressed
 * (on the build host) with LZO and decompressed at runtime. Since the
 * older hardware release had only a small amount of real RAM (as in
 * 'randomly accessible') there is the option to compress, and therefore
 * decompress, the image in several parts where each part will fit into
 * the available RAM. The idea is that after decompressing each part it
 * can be transferred to some other location (the strangely behaving RAM
 * on the old hardware, or directly onto the display controller), thereby
 * freeing the memory to be used for decompressing the next part.
 * 
 * As a further optimization generate_splash.c will keep track of which
 * compressed parts it has already written and then may reuse the same
 * part later on. If you compress 10000 bytes of white in 10 parts with
 * 1000 bytes each you would end up with 10 parts that have identical
 * compressed data. This optimization will not store that data more than
 * once.
 * 
 */

/* Early declarations to be able to include image.h */
struct splash_part;
struct splash_image;

#include "image.h"

#define MAX_PART_SIZE (1024*1024)

/* This structure represents part data. Per image
 * there will be one or more objects of this type
 * that are static in the C file of the respective
 * image.
 */
struct splash_part {
	unsigned int compress_len;
	unsigned int uncompress_len;
	const char *data;
};

/* This structure represents the image itself.
 * splash_parts will be a list of pointers to
 * (static const) splash_part structs, where
 * each pointer may occur more than once.
 */
struct splash_image {
	unsigned int width;
	unsigned int height;
	enum image_bpp bits_per_pixel;
	const struct splash_part * const *splash_parts;
};


#endif /*SPLASH_H_*/
