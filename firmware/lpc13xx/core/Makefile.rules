CROSS=arm-none-eabi-
CC=$(CROSS)gcc
LD=$(CROSS)ld
OBJCOPY=$(CROSS)objcopy
OBJDUMP=$(CROSS)objdump
AR=$(CROSS)ar
LDSCRIPT=$(CORE)linker/$(CPU).ld

CORE=../core/

#
# CFLAGS common to both the THUMB and ARM mode builds
#
CFLAGS= \
-D __$(CPU)__ \
-D __$(ARCH)xx__ \
-Iconfig \
-I$(CORE)cmsis/inc \
-Wall  \
-Werror \
-Wextra  \
-Wno-multichar \
-Wstrict-prototypes  \
-Wno-strict-aliasing  \
-D CORTEXM3_GCC  \
-mcpu=cortex-m3 \
-mthumb \
-msoft-float \
-mthumb \
-fno-common \
-T$(LDSCRIPT) \
$(DEBUG)  \
$(OPTIM) \
-fomit-frame-pointer \
-ffunction-sections \
-fdata-sections \
$(APP_CFLAGS)

CRT0=$(CORE)cmsis/src/startup_$(ARCH)xx.s

LINKER_FLAGS=$(APP_LDFLAGS) -Xlinker --gc-sections -Xlinker -o$(TARGET).elf -Xlinker -M -Xlinker -Map=$(TARGET).map

ARM_SRC= \
  $(APP_SRC) \
  $(CORE)cmsis/src/core_cm3.c \
  $(CORE)cmsis/src/system_$(ARCH)xx.c \

#
# Define all object files.
#
ARM_OBJ = $(ARM_SRC:.c=.o)
APP_ADDITIONAL?=

$(TARGET).bin : $(TARGET).elf
	$(OBJCOPY) $(TARGET).elf -O binary $(TARGET).bin

$(TARGET).hex : $(TARGET).elf
	$(OBJCOPY) $(TARGET).elf -O ihex $(TARGET).hex

$(TARGET).elf : $(ARM_OBJ) $(CRT0) $(BOOTLOADER) $(APP_ADDITIONAL) Makefile
	$(CC) $(CFLAGS) $(ARM_OBJ) $(BOOTLOADER) $(APP_ADDITIONAL) -nostartfiles $(CRT0) $(LINKER_FLAGS)
	$(OBJDUMP) -d $(TARGET).elf > $(TARGET).asm

$(ARM_OBJ) : %.o : %.c $(LDSCRIPT) Makefile
	$(CC) -c $(CFLAGS) $< -o $@

flash : $(TARGET).bin
	../lpc-flash/src/lpc-flash $(TARGET).bin /media/CRP\ DISABLD/firmware.bin

clean : app_clean
	find $(CORE) -name '*.o' -exec rm \{\} \;
	rm -f $(TARGET).bin $(TARGET).elf $(TARGET).map $(TARGET).asm
